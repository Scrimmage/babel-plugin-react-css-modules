{"version":3,"sources":["../../src/getClassName.js"],"names":[],"mappings":"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","file":"getClassName.js","sourcesContent":["// @flow\n\nimport type {\n  StyleModuleMapType,\n  StyleModuleImportMapType,\n  HandleMissingStyleNameOptionType\n} from './types';\n\nconst DEFAULT_HANDLE_MISSING_STYLENAME_OPTION = 'throw';\n\nconst isNamespacedStyleName = (styleName: string): boolean => {\n  return styleName.indexOf('.') !== -1;\n};\n\nconst getClassNameForNamespacedStyleName = (\n  styleName: string,\n  styleModuleImportMap: StyleModuleImportMapType,\n  handleMissingStyleNameOption?: HandleMissingStyleNameOptionType\n): ?string => {\n  // Note:\n  // Do not use the desctructing syntax with Babel.\n  // Desctructing adds _slicedToArray helper.\n  const styleNameParts = styleName.split('.');\n  const importName = styleNameParts[0];\n  const moduleName = styleNameParts[1];\n  const handleMissingStyleName = handleMissingStyleNameOption ||\n    DEFAULT_HANDLE_MISSING_STYLENAME_OPTION;\n\n  if (!moduleName) {\n    if (handleMissingStyleName === 'throw') {\n      throw new Error('Invalid style name: ' + styleName);\n    } else if (handleMissingStyleName === 'warn') {\n      // eslint-disable-next-line no-console\n      console.warn('Invalid style name: ' + styleName);\n    } else {\n      return null;\n    }\n  }\n\n  if (!styleModuleImportMap[importName]) {\n    if (handleMissingStyleName === 'throw') {\n      throw new Error('CSS module import does not exist: ' + importName);\n    } else if (handleMissingStyleName === 'warn') {\n      // eslint-disable-next-line no-console\n      console.warn('CSS module import does not exist: ' + importName);\n    } else {\n      return null;\n    }\n  }\n\n  if (!styleModuleImportMap[importName][moduleName]) {\n    if (handleMissingStyleName === 'throw') {\n      throw new Error('CSS module does not exist: ' + moduleName);\n    } else if (handleMissingStyleName === 'warn') {\n      // eslint-disable-next-line no-console\n      console.warn('CSS module does not exist: ' + moduleName);\n    } else {\n      return null;\n    }\n  }\n\n  return styleModuleImportMap[importName][moduleName];\n};\n\ntype OptionsType = {|\n  handleMissingStyleName: HandleMissingStyleNameOptionType\n|};\n\nexport default (styleNameValue: string, styleModuleImportMap: StyleModuleImportMapType, options?: OptionsType): string => {\n  const styleModuleImportMapKeys = Object.keys(styleModuleImportMap);\n\n  const handleMissingStyleName = options && options.handleMissingStyleName ||\n    DEFAULT_HANDLE_MISSING_STYLENAME_OPTION;\n\n  return styleNameValue\n    .split(' ')\n    .filter((styleName) => {\n      return styleName;\n    })\n    .map((styleName) => {\n      if (isNamespacedStyleName(styleName)) {\n        return getClassNameForNamespacedStyleName(styleName, styleModuleImportMap, handleMissingStyleName);\n      }\n\n      if (styleModuleImportMapKeys.length === 0) {\n        throw new Error('Cannot use styleName attribute for style name \\'' + styleName +\n          '\\' without importing at least one stylesheet.');\n      }\n\n      const mappedClassNames = styleModuleImportMapKeys.map((importKey) => {\n        return styleModuleImportMap[importKey][styleName];\n      }).filter(Boolean);\n\n      if (mappedClassNames.length > 1) {\n        const importKeysWithMatches = styleModuleImportMapKeys.map((importKey) => {\n          return styleModuleImportMap[importKey][styleName] && importKey;\n        }).filter(Boolean);\n\n        throw new Error('Cannot resolve styleName \"' + styleName + '\" ' +\n          'because it is present in multiple imports:' +\n          '\\n\\n\\t' + importKeysWithMatches.join('\\n\\t') +\n          '\\nYou can resolve this by using a named import, e.g:' +\n          '\\n\\n\\timport foo from \"' + importKeysWithMatches[0] + '\";' +\n          '\\n\\t<div styleName=\"foo.' + styleName + '\" />\\n');\n      } else if (mappedClassNames.length === 0) {\n        if (handleMissingStyleName === 'throw') {\n          throw new Error('Could not resolve the styleName \\'' + styleName + '\\'.');\n        }\n        if (handleMissingStyleName === 'warn') {\n          // eslint-disable-next-line no-console\n          console.warn('Could not resolve the styleName \\'' + styleName + '\\'.');\n        }\n      }\n\n      return mappedClassNames[0];\n    })\n\n    // Remove any styles which could not be found (if handleMissingStyleName === 'ignore')\n    .filter(Boolean)\n    .join(' ');\n};\n"]}